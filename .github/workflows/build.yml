name: build-push-and-update-manifest

on:
  push:
    branches: main
    paths:
      - 'app/**'
      - 'svc-user/**'
      - 'svc-community/**'
      - 'svc-penpal/**'
      - 'svc-welfare/**'
      - 'svc-chat/**' 
      - 'welfare-crawler/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  MANIFEST_REPOSITORY: paas-able/doranchae-manifests
  MANIFEST_BRANCH: main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: user
            context: ./svc-user
            image: svc-user
            manifest_path: apps/svc-user/deployment.yaml
          - id: community
            context: ./svc-community
            image: svc-community
            manifest_path: apps/svc-community/deployment.yaml
          - id: penpal
            context: ./svc-penpal
            image: svc-penpal
            manifest_path: apps/svc-penpal/deployment.yaml
          - id: welfare
            context: ./svc-welfare
            image: svc-welfare
            manifest_path: apps/svc-welfare/deployment.yaml
          - id: chat
            context: ./svc-chat
            image: svc-chat
            manifest_path: apps/svc-chat/deployment.yaml
          - id: app
            context: ./app
            image: app
            manifest_path: apps/app-frontend/deployment.yaml
          - id: crawler
            context: ./welfare-crawler
            image: welfare-crawler
            manifest_path: apps/welfare-crawler/deployment.yaml

    steps:
      - uses: actions/checkout@v4

      - name: Compute image namespace
        run: echo "IMAGE_NS=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set branch latest tag
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "LATEST_TAG=main-latest" >> $GITHUB_ENV
          else
            echo "LATEST_TAG=dev-latest" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (${{ matrix.id }})
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NS }}/${{ matrix.image }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NS }}/${{ matrix.image }}:${{ env.LATEST_TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}

  # --- 매니페스트 업데이트 작업 ---
  update-manifests:
    needs: build # 'build' 작업이 성공해야만 실행됩니다.
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: user
            image: svc-user
            manifest_path: apps/svc-user/deployment.yaml
          - id: community
            image: svc-community
            manifest_path: apps/svc-community/deployment.yaml
          - id: penpal
            image: svc-penpal
            manifest_path: apps/svc-penpal/deployment.yaml
          - id: welfare
            image: svc-welfare
            manifest_path: apps/svc-welfare/deployment.yaml
          - id: chat
            image: svc-chat
            manifest_path: apps/svc-chat/deployment.yaml
          - id: app
            image: app
            manifest_path: apps/app-frontend/deployment.yaml
          - id: crawler
            image: welfare-crawler
            manifest_path: apps/welfare-crawler/deployment.yaml

    steps:
      # 1. 'doranchae-manifests' 레포지토리를 체크아웃합니다.
      - name: Checkout manifests repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFEST_REPOSITORY }}
          token: ${{ secrets.JIIN_REPOACCESS_TOKEN }}
          ref: ${{ env.MANIFEST_BRANCH }}

      # 2. 'build' 작업과 동일하게 이미지 네임스페이스 계산
      - name: Compute image namespace
        run: echo "IMAGE_NS=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 3. 'sed' 명령어로 deployment.yaml 파일의 이미지 태그를 교체합니다.
      - name: Update image tag in deployment.yaml
        run: |
          # 기본 이미지 이름 (예: ghcr.io/paas-able/doranchae/app)
          IMAGE_BASE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NS }}/${{ matrix.image }}"
          
          # 새 이미지 태그 (예: ghcr.io/paas-able/doranchae/app:a1b2c3d...)
          NEW_IMAGE_WITH_TAG="${IMAGE_BASE_NAME}:${{ github.sha }}"
          
          # 수정할 파일 경로 (예: apps/app-frontend/deployment.yaml)
          FILE_TO_UPDATE="${{ matrix.manifest_path }}"
          
          echo "Updating ${FILE_TO_UPDATE}..."
          echo "Setting image to: ${NEW_IMAGE_WITH_TAG}"
          
          # 'sed'를 사용해 'image: [기본 이미지 이름]:[아무 태그]'를 'image: [새 이미지 태그]'로 교체
          # (구분자로 |를 사용)
          sed -i.bak "s|image: ${IMAGE_BASE_NAME}:.*|image: ${NEW_IMAGE_WITH_TAG}|g" ${FILE_TO_UPDATE}
          
          echo "--- Diff ---"
          cat ${FILE_TO_UPDATE}.bak || echo "No backup file created."
          echo "------------"
          cat ${FILE_TO_UPDATE}
          echo "------------"

      # 4. 변경 사항을 Git에 커밋하고 푸시합니다.
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add .
          
          # 변경 사항이 있을 때만 커밋
          if git diff --staged --quiet; then
            echo "No changes to commit for ${{ matrix.id }}."
          else
            git commit -m "Update image for ${{ matrix.id }} to ${{ github.sha }}"
            git push
          fi
